# Solución Completa para Salón de Belleza

Hemos identificado que el problema principal es una combinación de:

1. Un entorno incompatible (Replit/Linux vs SQL Server/Windows)
2. Problemas específicos en la creación de citas con el campo Estado

## 1. Solución para el controlador CitasController.cs

Principales cambios:
- En el método GET `Create()`: Establecemos explícitamente `Estado = EstadoCita.Pendiente`
- En el método POST `Create()`: Agregamos manejo de errores y registro para depuración
- En el método POST `Create()`: Aseguramos que `Estado` se incluya en el atributo `[Bind]` y se trate adecuadamente

```csharp
// En el método GET Create()
var cita = new Cita
{
    Fecha = DateTime.Today.AddDays(1),
    Hora = new TimeSpan(12, 0, 0), // 12:00 PM
    DuracionMinutos = 60,
    Estado = EstadoCita.Pendiente  // Establecer el estado predeterminado aquí
};

// En el método POST Create()
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Create([Bind("Id,ClienteId,ServicioId,EmpleadoId,Fecha,Hora,DuracionMinutos,Comentarios,PrecioFinal,Estado")] Cita cita)
{
    if (ModelState.IsValid)
    {
        cita.FechaCreacion = DateTime.UtcNow;
        cita.UltimaModificacion = DateTime.UtcNow;
        
        // Si no se envía un estado, establecer como Pendiente por defecto
        if (cita.Estado == 0)
        {
            cita.Estado = EstadoCita.Pendiente;
        }
        
        try 
        {
            _context.Add(cita);
            await _context.SaveChangesAsync();
            
            TempData["SuccessMessage"] = "¡Cita agendada correctamente! Se enviará una confirmación al cliente.";
            return RedirectToAction(nameof(Details), new { id = cita.Id });
        }
        catch (Exception ex)
        {
            // Registrar el error y agregarlo al ModelState para mostrarlo al usuario
            Console.WriteLine($"Error al guardar la cita: {ex.Message}");
            ModelState.AddModelError(string.Empty, $"Error al guardar la cita: {ex.Message}");
        }
    }
    else 
    {
        // Registrar los errores del ModelState para depuración
        var errors = ModelState.Values.SelectMany(v => v.Errors);
        foreach (var error in errors)
        {
            Console.WriteLine($"Error de validación: {error.ErrorMessage}");
        }
    }
    
    // Resto del código para manejar errores...
}
```

## 2. Solución para la vista Create.cshtml

Principales cambios:
- Reemplazamos el dropdown de estados con un campo de texto de solo lectura
- Agregamos un campo oculto que envía el valor `Pendiente`
- Añadimos una explicación para el usuario

```html
<div class="col-md-6 mb-3">
    <label for="EstadoInfo" class="form-label" style="color: #ff1493; font-weight: 500;">Estado</label>
    <input type="text" id="EstadoInfo" class="form-control" value="Pendiente" readonly />
    <input type="hidden" asp-for="Estado" value="@SalonBellezaCatalogo.Models.EstadoCita.Pendiente" />
    <small class="form-text text-muted">Las nuevas citas siempre se crean en estado pendiente</small>
</div>
```

## 3. Solución para el entorno

La aplicación está diseñada para ejecutarse en un entorno Windows con SQL Server usando autenticación integrada. Para ejecutarla en un entorno local Windows:

1. Asegúrate de tener SQL Server instalado y configurado correctamente.
2. Verifica que la base de datos "SalonBelleza" exista o que tu usuario tenga permisos para crearla.
3. Usa la configuración en `appsettings.json`:
```json
{
  "ConnectionStrings": {
    "conexion": "Server=localhost;Database=SalonBelleza;Trusted_Connection=True;TrustServerCertificate=True;"
  }
}
```

## 4. Pasos para implementar la solución

1. Reemplaza el archivo `Controllers/CitasController.cs` con la versión corregida.
2. Reemplaza el archivo `Views/Citas/Create.cshtml` con la versión corregida.
3. Si es necesario, verifica que el modelo `Cita` tenga el valor predeterminado correcto para `Estado`.
4. Ejecuta la aplicación en tu entorno local Windows con SQL Server.

## 5. Cómo ejecutar en un entorno Linux (por ejemplo, Replit)

Si quieres adaptar la aplicación para un entorno Linux, necesitarías:

1. Cambiar la cadena de conexión para usar PostgreSQL o SQL Server con autenticación de usuario/contraseña:
```json
{
  "ConnectionStrings": {
    "conexion": "Server=your_server;Database=SalonBelleza;User Id=your_username;Password=your_password;TrustServerCertificate=True;"
  }
}
```

2. Modificar `Program.cs` para usar la base de datos adecuada:
```csharp
// Para PostgreSQL
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(connectionString));

// O para SQL Server con autenticación de usuario/contraseña
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));
```

Espero que esta solución resuelva tus problemas. Los archivos corregidos están disponibles en:
- `SalonBellezaCatalogo/Controllers/CitasController.cs.fixed`
- `SalonBellezaCatalogo/Views/Citas/Create.cshtml.fixed`

Simplemente renómbralos (elimina el sufijo ".fixed") para implementar los cambios.
